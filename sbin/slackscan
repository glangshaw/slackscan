#!/bin/bash -p
#
#  slackscan
   version='3.8.1'

#  Copyright (c) 2013-2023, Gary Langshaw. <gary.langshaw@gmail.com>
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -o pipefail

unset IFS
PATH='/usr/bin'
LC_ALL=C

########################################################################
# Defaults:

SLACKSCAN_DIR='/etc/slackscan'

########################################################################
# Globals

count_u=0
count_i=0
count_r=0

########################################################################
# functions:

function die()
{
  1>&2 printf "%s: %s\n" "${0##*/}" "${2:-aborted.}"
  exit ${1:-16}
}

remove_comments()
{
  grep -v -E '^ *(#|$)' "${1:--}"
}

file_regex_type()
{
  grep -q '^[[:space:]]*# Format: extended-regex' ${1:--} \
    &&  printf '-E'
}

function reformat_available()
{
   # format:  short-name long-name filename
   sed -e 's|^\(.*/\)\([^/]\+\)-\([^-/]\+\)-\([^-/]\+\)-\([0-9]\+\)\([^-/]*\)\(\.t[^-/]z\)$|\2 \2-\3-\4-\5\6 \1\2-\3-\4-\5\6\7| ; t ; d '
}

function find_in_dir()
{
  if [ ! -d "$1" ]; then
    die 16 "slackscan: directory not found, $1"
  fi

  find -L "$1" -type f -name "*.t?z" \
    | reformat_available \
    | sort -Vr -k 2,2 \
    | sort -u -k 1,1

  if [ $? -ne 0 ]; then
    die 16 "error in find_in_dir()"
  fi
}

function fetch_md5()
{
  local fd_sig

  exec {fd_sig}<> "${workdir:-${TMPDIR:-/tmp}}/signature" \
    || die 16 "could not create 'signature' file"

  if curl --retry 3 -s -f -o /dev/fd/$fd_checksums "$1" ; then
    if [ ${o_skip_verify:-0} -ne 1 ]; then
      curl --retry 3 -s -f -o /dev/fd/$fd_sig "$1.asc" \
        && $gpg_verify_cmd /dev/fd/$fd_sig /dev/fd/$fd_checksums >/dev/null 2>&1 \
        || { die 8 "gpg verification failed on $1" ; }
    fi
  else
    die 16 "Aborted - could not fetch $1"
  fi

  exec {fd_sig}>&-
}

function reformat_md5()
{
  # extracts filepaths matching .t?z, prefixing with path to CHECKSUMS.md5
  local prefix="${1%/}"
  sed -e "s|\([[:alnum:]]\{32\}  \)\(\./\)\?\(.\+-[^-/]\+-[^-/]\+-[0-9]\+[^-/]*\.t[^-/]z\$\)|${prefix}/\3| ;t ;d"
}

function find_in_md5()
{
  local prefix=${1%/*}
  local filename

  exec {fd_checksums}<> "${workdir:-${TMPDIR:-/tmp}}/checksums" \
    || die 16 "could not create checksums file"

  case "$1" in
    http://*|https://*)  fetch_md5 "$1"
                        filename=/dev/fd/$fd_checksums
                        ;;

    file://*|/* )  filename=${1#file://} ;;
    *)  die 16 "unsupported: $1" ;;
  esac

  if [ ! -r "$filename" ]; then
    die 16 "slackscan: file not found, $filename"
  fi

  reformat_md5 "$prefix" < "$filename" \
    | reformat_available \
    | sort -Vr -k 2,2 \
    | sort -u -k 1,1

  exec {fd_checksums}>&-
}

function find_available()
{
  local pkg_source pkg_sources

  mapfile -t pkg_sources < <( remove_comments "$conf" ) \
    || die 16 "could not read configuration file"

  if [ ${#pkg_sources[@]} -eq 0 ]; then
    die 16 "no package source locations found"
  fi

  for pkg_source in ${pkg_sources[@]}
  do
    case "$pkg_source" in
      *.md5|*.MD5) find_in_md5 "$pkg_source" ;;
                *) find_in_dir "$pkg_source" ;;
    esac
  done
}

function get_pkgdb_dir()
{
  local dir

  for dir in "$ROOT/var/lib/pkgtools/packages" "$ROOT/var/log/packages" ''
  do
    [ -d "$dir" ]  &&  break
  done

  [ -n "$dir" ]  &&  printf "%s" "$dir"
}

function reformat_installed()
{
   # format:  short-name long-name
   sed -e 's|^\(.*/\)\([^/]\+\)-\([^-/]\+\)-\([^-/]\+\)-\([0-9]\+\)\([^-]*\)$|\2 \2-\3-\4-\5\6| ; t ; d'
}

function list_installed()
{
  local pkgdatadir=$( get_pkgdb_dir )

  if [ "${o_ignore_database:-0}" -eq 1 ]; then
    return 0
  fi

  find -H "$pkgdatadir" -type f \
    | reformat_installed \
    | sort -k 1,1

  if [ $? -ne 0 ]; then
    die 16 "error in list_installed()"
  fi
}

function run_file_filter()
{
  local infile=$1 grep_opt=$2
  local fd_temp1 filter_cmd
  local count regex_type

  if [ -e "$infile" ]; then
    regex_type=$( file_regex_type "$infile")
    exec {fd_temp1}<> "$( mktemp -p "$workdir" temp1.XXXXXX )"
    remove_comments "$infile" >&$fd_temp1
    count=$( wc -l </dev/fd/$fd_temp1 )
  fi

  if [ ${count:-0} -gt 0 ]; then
    filter_cmd="grep $grep_opt $regex_type -f /dev/fd/$fd_temp1"
  else
    filter_cmd='cat'
  fi

  $filter_cmd

  [ -n "$fd_temp1" ] && exec {fd_temp1}>&-
}

function apply_filter()
{
  if [ ${o_ignore_filter:-0} -eq 1 ]; then
    cat
  else
    run_file_filter "$filter_file"
  fi
}

function apply_blacklist()
{
  if [ ${o_ignore_blacklist:-0} -eq 1 ]; then
    cat
  else
    run_file_filter "$blacklist_file" -v
  fi
}

function list_available_filtered()
{
  find_available \
    | apply_filter \
    | apply_blacklist \
    | sort -u -k 1,1

  if [ $? -ne 0 ]; then
    die 16 "error in list_available_filtered()"
  fi
}

function apply_protect()
{
  if [ ${o_ignore_protect:-0} -eq 1 ]; then
    cat
  else
    run_file_filter "$protect_file" -v
  fi
}

function create_table
{
  local dups fd_available fd_installed

  exec {fd_available}<> "${workdir:-${TNPDIR:-/tmp}}/available"  \
    || die 16 "could not open 'available' file."

  exec {fd_installed}<> "${workdir:-${TMPDIR:-/tmp}}/installed"  \
    || die 16 "could not open 'installed' file."

  list_available_filtered >&$fd_available

  list_installed | sort -Vr -k 2,2 | sort -u -k 1,1 >&$fd_installed


  sort -u -k 1,1 <( cut -f1 -d ' ' /dev/fd/$fd_installed ) \
                 <( cut -f1 -d ' ' /dev/fd/$fd_available ) \
    | join -a 1 -e 'not-installed' -o 1.1,2.2 - /dev/fd/$fd_installed \
    | join -a 1 -e 'not-available' -o 1.1,1.2,2.2,2.3 - /dev/fd/$fd_available

  if [ $? -ne 0 ]; then
    die 16 "error in create_table()"
  fi

  exec {fd_available}>&-
  exec {fd_installed}>&-
}

function report()
{
  local package installed available pkgpath
  local fd_rep_i fd_rep_u fd_rep_r

  [ "$o_install" = "-" ] && o_install=/dev/fd/1
  [ "$o_upgrade" = "-" ] && o_upgrade=/dev/fd/1
  [ "$o_remove" = "-" ]  && o_remove=/dev/fd/1

  if [ ! -z "$o_install" ]; then
    exec {fd_rep_i}<> "$o_install" || die 16 "could not open -i file"
  fi

  if [ ! -z "$o_upgrade" ]; then
    exec {fd_rep_u}<> "$o_upgrade" || die 16 "could not open -u file"
  fi

  if [ ! -z "$o_remove" ]; then
    exec {fd_rep_r}<> "$o_remove"  || die 16 "could not open -r file"
  fi

  while read package installed available pkgpath
  do
    if [ "$installed" != 'not-installed' ] && \
       [ "$available" != 'not-available' ] && \
       [ "$available" != "$installed" -o "${o_reinstall:-0}" -eq 1 ]
    then
      (( count_u++ ))
      [ "$o_upgrade" ] && echo "$pkgpath" >&$fd_rep_u
    fi
    if [ "$installed" == 'not-installed' ]
    then
      (( count_i++ ))
      [ "$o_install" ] && echo "$pkgpath" >&$fd_rep_i
    fi
    if [ "$installed" != 'not-installed' ] && \
       [ "$available" == 'not-available' ]
    then
      (( count_r++ ))
      [ "$o_remove" ] && echo "$installed" | apply_protect >&$fd_rep_r
    fi
  done

  [ -n "$fd_rep_i" ]  &&  exec {fd_rep_i}>&-
  [ -n "$fd_rep_u" ]  &&  exec {fd_rep_u}>&-
  [ -n "$fd_rep_r" ]  &&  exec {fd_rep_r}>&-
}

function print_stats()
{
  printf "%s\n" \
    "# Package Installs: $count_i" \
    "# Package Upgrades: $count_u" \
    "# Package Removals: $count_r"
}

function populate_protect()
{
  if ! cmp -s "${protect_file}" "${protect_file}~" ; then
    cp "${protect_file}" "${protect_file}~"
  fi

  printf '%s\n' \
      "# ${protect_file}" \
      '# Format: basic-regex' \
      '#' \
      "#  This file is the 'protect' file for the 'slackscan' utility." \
      '#  It was autogenerated by "slackscan -S".' \
      '#' \
      '#  This is essentially a blacklist specific to removal operations' \
      '#  and should be used to prevent the removal of packages whose' \
      '#  package file is no longer available in any configured location.' \
      '#' \
      '#  Important Note:' \
      '#    unlike the blacklist file which matches the full path of the package file,' \
      '#    this file matches only package names, so there is no path components or' \
      '#    \.t.z suffix to match.' \
      '#' \
      '' \
      '## uncomment the following to protect any packages tagged _local:' \
      '# _local$' \
      '' \
      '## uncomment the following to protect any packages tagged _SBo (slackbuilds.org):' \
      '# _SBo$' \
      '## Autogenerated list:' \
      '' \
   > "${protect_file}"

  list_installed \
    | sort -Vr -k 2,2 | sort -u -k 1,1 \
    | sed 's/\([^ ]\+\)\(.*\)/^\1-/' >> "${protect_file}"
}

########################################################################
# parse arguments

unset o_install o_remove o_upgrade \
      o_ignore_blacklist o_ignore_filter o_ignore_protect \
      o_populate_protect o_ignore_database o_reinstall \
      o_config o_profile o_usage o_skip_verify o_quiet

while getopts ':p:i:u:r:hqBFINPRS' opt
do
  case "$opt" in
    p)  o_profile=$OPTARG       ;;
    h)  o_usage=1               ;;
    q)  o_quiet=1               ;;
    i)  o_install=$OPTARG       ;;
    r)  o_remove=$OPTARG        ;;
    u)  o_upgrade=$OPTARG       ;;
    B)  o_ignore_blacklist=1    ;;
    F)  o_ignore_filter=1       ;;
    I)  o_ignore_database=1     ;;
    N)  o_skip_verify=1         ;;
    P)  o_ignore_protect=1      ;;
    S)  o_populate_protect=1    ;;
    R)  o_reinstall=1           ;;
    \?) die 16 "Unexpected option: -$OPTARG" ;;
    :)  die 16 "Missing operand for option -$OPTARG" ;;
  esac
done
shift $(( OPTIND - 1 ))

if [ -z "$o_profile" ]; then
  o_profile="${SLACKSCAN_PROFILE:-default}"
fi

conf="${SLACKSCAN_DIR%/}/${o_profile}/scan"
filter_file="${SLACKSCAN_DIR%/}/${o_profile}/filter"
blacklist_file="${SLACKSCAN_DIR%/}/${o_profile}/blacklist"
protect_file="${SLACKSCAN_DIR%/}/${o_profile}/protect"

########################################################################

if [ "$o_usage" ]; then
  printf '%s\n' \
    'Usage:' \
    '  slackscan [ -NBFIPSq ] [ [ -p profile ]' \
    '            [-i filename ] [ -u filename ] [ -r filename ] ' \
    '' \
    '  where, ' \
    '    -p :   specifies profile name.' \
    '    -q :   quiet: do not print statistics.' \
    '    -i :   specifies file to hold list of packages to be installed. ' \
    '    -u :   specifies file to hold list of packages to be upgraded. ' \
    '    -r :   specifies file to hold list of packages to be removed. ' \
    "    -N :   skip gpg verify of downloaded CHECKSUMS.md5 files. " \
    '           (INSECURE). ' \
    '    -B :   ignore the blacklist file.' \
    '    -F :   ignore the filter file.' \
    '    -I :   ignore the package database. ' \
    '           All available packages will be treated as new.' \
    '    -R :   ignore package versions. ' \
    '           All installed packages will be treated as outdated.' \
    '    -P :   ignore the protect file.' \
    '    -S :   Store currently installed package names in protect file.' \
    ''
   exit 0
fi

########################################################################
# check availability of external utilities:

type mktemp find grep sed cut cmp sort join uniq curl >/dev/null \
  || die 16 "external utilties not found"

unset gpg_verify_cmd

if [ "${o_skip_verify:-0}" -eq 0 ]; then
  for file in gpgv1 gpgv gpgv2 gpg1 gpg gpg2 ""
  do
    gpg=$(type -p "$file") && break
  done

  case "$gpg" in
    */gpgv* )  gpg_verify_cmd="$gpg --keyring pubring.gpg" ;;
    */gpg*  )  gpg_verify_cmd="$gpg --verify" ;;
    *       )  die 16 "Could not find gpg command" ;;
  esac
  unset gpg file
fi

########################################################################
# If '-S' was specified store the list of installed packages into
# the protect file. Useful for preventing accidental package removals.

if [ ${o_populate_protect:-0} -eq 1 ]; then
  populate_protect
fi

########################################################################

workdir="$( mktemp -d /tmp/slackscan.XXXXXX )" \
  && cd "$workdir" || die 16 "could not create workdir"

exec {table}<> "$workdir/table"  \
  || die 16 "could not create table file"

create_table >&$table

report < /dev/fd/$table

if [ ${o_quiet:-0} -eq 0 ]; then
  print_stats
fi

if (( count_i + count_u + count_r > 0 )); then
  rc=0
else
  rc=2
fi

exec {table}>&-

########################################################################
# clean-up

cd /tmp
rm -r "$workdir"

exit $rc

################################################################# End. #
